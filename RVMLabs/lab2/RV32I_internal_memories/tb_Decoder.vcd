$date
	Sat Nov 16 11:27:30 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_Decoder $end
$var wire 7 ! funct7 [6:0] $end
$var wire 3 " funct3 [2:0] $end
$var wire 32 # Uimm [31:0] $end
$var wire 1 $ System $end
$var wire 1 % Store $end
$var wire 5 & SourceRegister2 [4:0] $end
$var wire 5 ' SourceRegister1 [4:0] $end
$var wire 32 ( Simm [31:0] $end
$var wire 1 ) Load $end
$var wire 1 * LUI $end
$var wire 32 + Jimm [31:0] $end
$var wire 1 , JALR $end
$var wire 1 - JAL $end
$var wire 32 . Iimm [31:0] $end
$var wire 5 / DestinationRegister [4:0] $end
$var wire 1 0 Branch $end
$var wire 32 1 Bimm [31:0] $end
$var wire 1 2 AUIPC $end
$var wire 1 3 ALUReg $end
$var wire 1 4 ALUImmediate $end
$var reg 32 5 instruction [31:0] $end
$scope module uut $end
$var wire 32 6 instruction [31:0] $end
$var wire 7 7 opcode [6:0] $end
$var wire 7 8 funct7 [6:0] $end
$var wire 3 9 funct3 [2:0] $end
$var wire 32 : Uimm [31:0] $end
$var wire 1 $ System $end
$var wire 1 % Store $end
$var wire 5 ; SourceRegister2 [4:0] $end
$var wire 5 < SourceRegister1 [4:0] $end
$var wire 32 = Simm [31:0] $end
$var wire 1 ) Load $end
$var wire 1 * LUI $end
$var wire 32 > Jimm [31:0] $end
$var wire 1 , JALR $end
$var wire 1 - JAL $end
$var wire 32 ? Iimm [31:0] $end
$var wire 5 @ DestinationRegister [4:0] $end
$var wire 1 0 Branch $end
$var wire 32 A Bimm [31:0] $end
$var wire 1 2 AUIPC $end
$var wire 1 3 ALUReg $end
$var wire 1 4 ALUImmediate $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10 A
b10 @
b100 ?
b1000000000000100 >
b10 =
b1 <
b100 ;
b10000001000000000000000 :
b0 9
b0 8
b10011 7
b10000001000000100010011 6
b10000001000000100010011 5
14
03
02
b10 1
00
b10 /
b100 .
0-
0,
b1000000000000100 +
0*
0)
b10 (
b1 '
b100 &
0%
0$
b10000001000000000000000 #
b0 "
b0 !
$end
#10000
13
04
b110011 7
b10 &
b10 ;
b11 /
b11 @
b10 .
b10 ?
b11 (
b11 =
b100000000010 1
b100000000010 A
b1000001000000000000000 #
b1000001000000000000000 :
b1000000000000010 +
b1000000000000010 >
b1000001000000110110011 5
b1000001000000110110011 6
#20000
03
10
b1100011 7
b1000 !
b1000 8
b0 '
b0 <
b100 &
b100 ;
b110 /
b110 @
b100000100 .
b100000100 ?
b100000110 (
b100000110 =
b100000110 1
b100000110 A
b10000010000000000000000000000 #
b10000010000000000000000000000 :
b100000100 +
b100000100 >
b10000010000000000001101100011 5
b10000010000000000001101100011 6
#30000
00
1*
b110111 7
b1 "
b1 9
b0 !
b0 8
b0 &
b0 ;
b0 /
b0 @
b0 .
b0 ?
b0 (
b0 =
b0 1
b0 A
b1000000000000 #
b1000000000000 :
b1000000000000 +
b1000000000000 >
b1000000110111 5
b1000000110111 6
#40000
12
0*
b10111 7
b10 "
b10 9
b1 /
b1 @
b1 (
b1 =
b100000000000 1
b100000000000 A
b10000000000000 #
b10000000000000 :
b10000000000000 +
b10000000000000 >
b10000010010111 5
b10000010010111 6
#50000
1-
02
b1101111 7
b0 "
b0 9
b1 &
b1 ;
b1 .
b1 ?
b100000000000000000000 #
b100000000000000000000 :
b100000000000 +
b100000000000 >
b100000000000011101111 5
b100000000000011101111 6
#60000
1,
0-
b1100111 7
b1 '
b1 <
b100 &
b100 ;
b10 /
b10 @
b100 .
b100 ?
b10 (
b10 =
b10 1
b10 A
b10000001000000000000000 #
b10000001000000000000000 :
b1000000000000100 +
b1000000000000100 >
b10000001000000101100111 5
b10000001000000101100111 6
#70000
0,
1)
b11 7
b10 "
b10 9
b10000001010000000000000 #
b10000001010000000000000 :
b1010000000000100 +
b1010000000000100 >
b10000001010000100000011 5
b10000001010000100000011 6
#80000
0)
1%
b100011 7
b0 "
b0 9
b1000 !
b1000 8
b0 '
b0 <
b101 &
b101 ;
b1000 /
b1000 @
b100000101 .
b100000101 ?
b100001000 (
b100001000 =
b100001000 1
b100001000 A
b10000010100000000000000000000 #
b10000010100000000000000000000 :
b100100000100 +
b100100000100 >
b10000010100000000010000100011 5
b10000010100000000010000100011 6
#90000
0%
1$
b1110011 7
b0 !
b0 8
b0 &
b0 ;
b0 /
b0 @
b0 .
b0 ?
b0 (
b0 =
b0 1
b0 A
b0 #
b0 :
b0 +
b0 >
b1110011 5
b1110011 6
#100000
